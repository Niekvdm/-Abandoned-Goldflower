@{
	ViewData["Title"] = "Install NSP(s)";
}

<div id="app">
	<div class="header">
		&nbsp;
	</div>

	<div class="container">
		<section class="module">
			<div class="module-inner">
				<div class="content-panel">
					<div class="content-header-wrapper">
						<h2 class="title">My NSP(s)</h2>
						
						<ul class="notifications">
							<li class="dropdown">
								<a class="dropdown-toggle btn btn-sm btn-default" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
									Events <span class="label label-primary">{{ events.length }}</span>
								</a>

								<ul class="dropdown-menu notify-drop">
									<div class="notify-drop-title">
										<div class="row">
											<div class="col-md-6 col-sm-6 col-xs-6"><strong>Events</strong></div>
										</div>
									</div>

									<div class="drop-content">
										<li v-for="(item, index) in sortedEvents" :key="index">
											<div class="col-md-12 col-sm-12 col-xs-12">
												<span :class="`label label-${convertErrorTypeToClass(item.type)} pull-right`">
													{{ new Date(item.dateTime).toLocaleTimeString() }}
												</span>
												<br />
												<p :class="`text-${convertErrorTypeToClass(item.type)}`">{{ item.message }}</p>
											</div>
										</li>				
									</div>
								</ul>
							</li>
						</ul>

						<div class="alert-container">                            
							<div class="alert alert-danger" v-if="error">
								<strong>Error:</strong>
								<p>
									{{ error }}
								</p>
							</div>
                            
							<div class="alert alert-warning" v-if="warning">
								<strong>Warning:</strong>
								<p>
									{{ warning }}
								</p>
							</div>                            
						</div>

						<div class="actions" v-if="installer.status === IDLE || installer.status === ABORTED || installer.status === CANCELLED">
							<div class="form-group">
								<label for="path">Enter your NSP directory path below</label>
								<input type="text" id="path" v-model="path" class="form-control" />
							</div>

							<button class="btn btn-primary" v-on:click="onSelectDirectoryClicked">
								<span class="fa fa-folder"></span> Open NSP directory
							</button>
						</div>
					</div>

					<template v-if="installer.status === IDLE || installer.status === ABORTED || installer.status === CANCELLED">
						<p class="alert alert-info">
							The number in front of the selected NSP(s) indicates the installation order
						</p>

						<div class="actions clearfix">
							<div class="pull-right">
								<button class="btn btn-primary" v-on:click="onInstallCicked(processors.TINFOIL)" :disabled="!selected.length">
									<span class="fa fa-upload"></span> Install with Tinfoil
								</button>
								
								<button class="btn btn-primary" v-on:click="onInstallCicked(processors.GOLDLEAF)" :disabled="!selected.length">
									<span class="fa fa-upload"></span> Install with Goldleaf
								</button>
							</div>
						</div>

						<div class="drive-wrapper drive-list-view">
							<div class="table-responsive drive-items-table-wrapper">
								<table class="table table-hover">
									<thead>
										<tr>
											<th class="order"></th>
											<th class="type"></th>
											<th class="name truncate">Name</th>
											<th class="titleid">Title ID</th>
											<th class="version">Version</th>
											<th class="size">Size</th>
										</tr>
									</thead>
									<tbody>
										<tr v-for="(file, index) in files" :key="index" :class="{ selected: file.selected }">
											<td class="order">
												<span v-if="file.selected">{{ selected.findIndex(x => x.name === file.name) + 1 }}</span>
											</td>

											<td class="type">
												<i class="fa fa-file-text-o text-primary"></i>
											</td>

											<td class="name truncate">
												<a v-on:click="onFileClicked(file)">{{ file.name }}</a>
											</td>

											<td class="titleid">
												{{ getTitleId(file.name) }}
											</td>

											<td class="version">
												{{ getTitleVersion(file.name) }}
											</td>

											<td class="size">
												{{ convertBytesToHumanSize(file.size) }}
											</td>
										</tr>
									</tbody>
								</table>
							</div>
						</div>

						<div class="actions clearfix">
							<div class="pull-right">
								<button class="btn btn-primary" v-on:click="onInstallCicked(processors.TINFOIL)" :disabled="!selected.length">
									<span class="fa fa-upload"></span> Install with Tinfoil
								</button>
								
								<button class="btn btn-primary" v-on:click="onInstallCicked(processors.GOLDLEAF)" :disabled="!selected.length">
									<span class="fa fa-upload"></span> Install with Goldleaf
								</button>
							</div>
						</div>
					</template>
					<template v-else-if="installer.status === INSTALLING || installer.status === AWAITINGUSERINPUT || installer.status === FINISHED">
						<div class="tile-progress tile-cyan">
							<div class="tile-header">
								<h3>{{ installer.currentFile.name }}</h3>
								<span>File progress: {{ installer.files.findIndex(x => x.name === installer.currentFile.name) + 1 }} / {{ installer.files.length }}</span>
							</div>
							<div class="tile-progressbar">
								<span :data-fill="`${installer.progress}%`" :style="`width: ${installer.progress}%;`"></span>
							</div>
							<div class="tile-footer">
								<h4>
									<span class="pct-counter">{{ installer.progress }}</span>%
								</h4>
								<span v-if="installer.state === FINISHED">Installation completed</span>
                                <span v-if="installer.state === AWAITINGUSERINPUT">Awaiting user input</span>
                                <span v-if="installer.state === INSTALLING">Installing</span>
							</div>
						</div>


						<div class="actions clearfix">
							<button class="btn btn-danger pull-right" v-on:click="onAbortClicked" v-if="installer.status !== FINISHED">
								<span class="fa fa-close"></span> Abort installation
							</button>

                            <button class="btn btn-success pull-right" v-on:click="onCompleteClicked" v-else>
								<span class="fa fa-close"></span> Complete installation
							</button>
						</div>

						<div class="drive-wrapper drive-list-view">
							<div class="table-responsive drive-items-table-wrapper">
								<table class="table table-hover">
									<thead>
										<tr>
											<th class="type"></th>
											<th class="name truncate">Name</th>
											<th class="titleid">Title ID</th>
											<th class="version">Version</th>
											<th class="size">Size</th>
										</tr>
									</thead>
									<tbody>
										<tr v-for="(file, index) in installer.files" :key="index" :class="`file-state-${file.state}`">
											<td class="type">
												<i v-if="file.state === INSTALLING" class="fa fa-spin fa-circle-o-notch"></i>
												<i v-else-if="file.state === FINISHED" class="fa fa-check text-success"></i>
												<i v-else-if="file.state === FAILED" class="fa fa-close text-danger"></i>
												<i v-else-if="file.state === CANCELLED" class="fa fa-close text-danger"></i>
												<i v-else="file.state === IDLE" class="fa fa-ellipsis-h"></i>
											</td>

											<td class="name truncate">
												<a>{{ file.name }}</a>
											</td>

											<td class="titleid">
												{{ getTitleId(file.name) }}
											</td>

											<td class="version">
												{{ getTitleVersion(file.name) }}
											</td>

											<td class="size">
												{{ convertBytesToHumanSize(file.size) }}
											</td>
										</tr>
									</tbody>
								</table>
							</div>
						</div>
					</template>
				</div>
			</div>
		</section>
	</div>
</div>

@section Scripts {
	<script type="text/javascript">
		const AWAITINGUSERINPUT = 0;
		const INSTALLING = 1;
		const ABORTED = 2;
		const FINISHED = 3;
		const CANCELLED = 4;
        const IDLE = 5;
        const FAILED = 6;

		const app = new Vue({
			el: '#app',

			data() {
				return {
					path: '@(ViewBag.Path.Replace(@"\", @"\\"))',
					files: [],
					selected: [],
					error: null,
					warning: null,
					events: [],
					installer: {
						status: IDLE,
						progress: 0,
						currentFile: null,
						files: [],
                        events: null
					},
					AWAITINGUSERINPUT: AWAITINGUSERINPUT,
					INSTALLING: INSTALLING,
					ABORTED: ABORTED,
					FINISHED: FINISHED,
                    CANCELLED: CANCELLED,
                    IDLE: IDLE,
                    FAILED: FAILED,
					processors: {
						TINFOIL: 0,
						GOLDLEAF: 1
					}
				};
			},

			mounted() {
				this.getInstallProgress();
			},

			methods: {
				convertErrorTypeToClass(type) {
					switch(type) {
						case 0: return 'info';
						case 1: return 'success';
						case 2: return 'warning';
						case 3: return 'danger';
						case 4: return 'primary';
						default: return 'light';
					}
				},

				onSelectDirectoryClicked() {
					this.files = [];
					this.error = null;
					this.warning = null;

					axios.post('installer/select-directory', { path: this.path })
						.then((response) => {
							if (response.data.result) {
								this.files = response.data.result;
							} else if (response.data.error) {
								this.error = response.data.error;
							}
						})
						.catch((error) => {
							this.error = error;
							console.error(error);
						});
				},

				convertBytesToHumanSize(bytes, decimals) {
					if (bytes == 0) return '0 Bytes';

					let k = 1024,
						dm = decimals <= 0 ? 0 : decimals || 2,
						sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
						i = Math.floor(Math.log(bytes) / Math.log(k));

					return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
				},

				getTitleId(filename) {
					let regExp = /(?<=\[).+?(?=\])/g;
					let matches = filename.match(regExp);

					return matches && matches.length > 0 ? matches[0] : '-';
				},

				getTitleVersion(filename) {
					let regExp = /(?<=\[).+?(?=\])/g;
					let matches = filename.match(regExp);

					if (matches && matches.length > 1) {
						return matches[1].replace('v', '');
					}

					return '-';
				},

				onFileClicked(file) {
					if (!file.selected) {
						this.selected.push(file);
					} else {
						const index = this.selected.findIndex(x => x.name === file.name);
						this.selected.splice(index, 1);
					}

					file.selected = !file.selected;
				},

				onInstallCicked(processor) {
					this.events = [];

					axios.post(`installer/install/${processor}`, this.selected)
						.then((response) => {
							if (response.data) {
								this.setInstaller(response.data);
                                this.getInstallProgress(true);
							} else if (response.data.error) {
								this.error = response.data.error;
							}
						})
						.catch((error) => {
							this.error = error;
							console.error(error);
						});
				},

				getInstallProgress(poll = false) {
					axios.get('installer/progress')
						.then((response) => {
							if (response.data) {
								this.setInstaller(response.data);

                                if(poll) {
                                    if(this.installer.status === INSTALLING || this.installer.status === AWAITINGUSERINPUT) {
                                        setTimeout(() => {
                                            this.getInstallProgress(true);
                                        }, 1000);
                                    }
                                }

							} else if (response.data.error) {
								this.error = response.data.error;
							}
						})
						.catch((error) => {
							this.error = error;
							console.error(error);
						});
				},

				setInstaller(data) {
					this.installer = data;

					for(let event of data.events) {
						if(!this.events.find(x => x.type === event.type && x.dateTime === event.dateTime)) {
							this.events.push(event);
						}
					}

                    this.warning = null;
                    this.error = null;

					if (data.status === ABORTED) {
						this.error = 'Installer has been aborted by user interaction';
					} else if(data.status === CANCELLED) {
						this.error = 'An error occured during installing';
                    } else if (data.status === AWAITINGUSERINPUT) {
						this.warning = 'Follow the steps in Goldleaf on the Switch to continue';
					}
				},

				onAbortClicked() {
					if (confirm('Are you sure you want to abort the installation?')) {
						axios.post('installer/abort')
							.then((response) => {
								if (response.data) {
									this.setInstaller(response.data);
								} else if (response.data.error) {
									this.error = response.data.error;
								}
							})
							.catch((error) => {
								this.error = error;
								console.error(error);
							});
					}
				},

                onCompleteClicked() {
					this.events = [];

                    axios.post('installer/complete')
                        .then((response) => {
                            if (response.data) {
                                this.selected = [];
                                this.setInstaller(response.data);
								this.$forceUpdate();
                            } else if (response.data.error) {
                                this.error = response.data.error;
                            }
                        })
                        .catch((error) => {
                            this.error = error;
                            console.error(error);
                        });
                }
			},

			computed: {
				installerProgress() {
					return this.installer.status === INSTALLING ? this.installer.files.findIndex(x => x.name === this.installer.currentFile.name) : 0;
				},

				sortedEvents() {
					return this.events.sort((a,b) => (a.dateTime < b.dateTime) ? 1 : ((b.dateTime < a.dateTime) ? -1 : 0));
				}
			}
		});
	</script>
}
